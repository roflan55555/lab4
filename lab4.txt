#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <math.h>

struct Node
{
	int data;// полезная информация
	struct Node* right;
	struct Node* left;
};
int manytimes(int data, struct Node* root);
struct Node* find(int data, struct Node* root);
void print_tree(struct Node* r, int l);
struct Node* CreateTree(struct Node* root, struct Node* r, int data);
int main()
{
	setlocale(LC_ALL, "");
	float D;
	int start = 1;
	struct Node* root;

	root = NULL;
	printf("0 - окончание построения дерева\n");
	while (start)
	{
		printf("Введите число: ");
		scanf_s("%f", &D);
		if (find(D, root) != NULL) {
			printf("Такое уже есть\n");
		}
		else
	
		if (D == 0)
		{
			printf("Построение дерева окончено\n\n");
			start = 0;
		}
		else
			root = CreateTree(root, root, D);

	}

	print_tree(root, 0);
	printf("Введите искомое число\n");
	scanf_s("%f", &D);
	struct Node* r = find(round(D), root);
	int y = manytimes(round(D), root);
	printf("Число %d встречается %d раз(a) \n", r->data, y);
	return 0;
}
struct Node* CreateTree(struct Node* root, struct Node* r, int data)
{
	if (r == NULL)
	{
		r = (struct Node*)malloc(sizeof(struct Node));
		if (r == NULL)
		{
			printf("Ошибка выделения памяти");
			exit(0);
		}

		r->left = NULL;
		r->right = NULL;
		r->data = data;
		if (root == NULL) return r;

		if (data > root->data)	root->left = r;
		else root->right = r;
		return r;
	}

	if (data > r->data)
		CreateTree(r, r->left, data);
	else
		CreateTree(r, r->right, data);

	return root;
}
void print_tree(struct Node* r, int l)
{

	if (r == NULL)
	{
		return;
	}

	print_tree(r->right, l + 1);
	for (int i = 0; i < l; i++)
	{
		printf("  ");
	}

	printf("%d\n", r->data);
	print_tree(r->left, l + 1);
}
struct Node* find(int data, struct Node* root) {
	if (root == NULL) {
		return NULL;
	}
	if (root->data == data) {
		return root;
	}
	if (data > root->data) {
		find(data, root->left);
	}
	else {
		find(data, root->right);
	}
}
int manytimes(int data, struct Node* root) {
	int many = 0;
	struct Node* r;
	r = find(data, root);
	if (r == NULL)
	{
		printf("Число не найдено!");
	}
	while (1) {

		if (r != NULL) {
			many++;
			r = r->right;
		}
		else {
			break;
		}
	}
	return many;
}
